# Generated by Django 5.2.5 on 2025-09-19 19:42

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('comment_identifier', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('body', models.TextField(null=True)),
                ('author_username', models.TextField(null=True)),
                ('creation_time', models.DateTimeField(auto_now=True, null=True)),
                ('updated_time', models.DateTimeField(auto_now=True, null=True)),
                ('hidden', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='CommentThread',
            fields=[
                ('comment_thread_identifier', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('creation_time', models.DateTimeField(auto_now=True, null=True)),
                ('updated_time', models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Response',
            fields=[
                ('response_identifier', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('series_identifier', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('login_cookie_token', models.TextField(null=True)),
                ('session_management_token', models.TextField(null=True)),
                ('post_identifier', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('image_url', models.TextField(null=True)),
                ('caption', models.TextField(null=True)),
                ('post_likes', models.IntegerField(default=0)),
                ('post_creation_time', models.DateTimeField(auto_now=True, null=True)),
                ('post_updated_time', models.DateTimeField(auto_now=True, null=True)),
                ('comment_thread_identifier', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('comment_thread_creation_time', models.DateTimeField(auto_now=True, null=True)),
                ('comment_thread_updated_time', models.DateTimeField(auto_now=True, null=True)),
                ('comment_identifier', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('author_username', models.TextField(null=True)),
                ('body', models.TextField(null=True)),
                ('comment_creation_time', models.DateTimeField(auto_now=True, null=True)),
                ('comment_updated_time', models.DateTimeField(auto_now=True, null=True)),
                ('comment_likes', models.IntegerField(default=0)),
                ('username', models.TextField(null=True)),
                ('identity_is_verified', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='PositiveOnlySocialUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('reset_id', models.IntegerField(default=0)),
                ('report_id', models.TextField(null=True)),
                ('verification_report_status', models.TextField(default='never_run')),
                ('identity_is_verified', models.BooleanField(default=False)),
                ('creation_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_time', models.DateTimeField(auto_now=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CommentLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment_liker_username', models.TextField(null=True)),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_system.comment')),
            ],
        ),
        migrations.CreateModel(
            name='CommentReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reported_by_username', models.TextField(null=True)),
                ('creation_time', models.DateTimeField(auto_now=True, null=True)),
                ('reason', models.TextField(null=True)),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_system.comment')),
            ],
        ),
        migrations.AddField(
            model_name='comment',
            name='comment_thread',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_system.commentthread'),
        ),
        migrations.CreateModel(
            name='LoginCookie',
            fields=[
                ('series_identifier', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('token', models.TextField(null=True)),
                ('cookie_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('post_identifier', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('image_url', models.TextField(null=True)),
                ('caption', models.TextField(null=True)),
                ('creation_time', models.DateTimeField(auto_now=True, null=True)),
                ('updated_time', models.DateTimeField(auto_now=True, null=True)),
                ('reported', models.BooleanField(default=False)),
                ('reported_time', models.DateTimeField(auto_now=True, null=True)),
                ('reported_by_username', models.TextField(null=True)),
                ('hidden', models.BooleanField(default=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='commentthread',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_system.post'),
        ),
        migrations.CreateModel(
            name='PostLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post_liker_username', models.TextField(null=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_system.post')),
            ],
        ),
        migrations.CreateModel(
            name='PostReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reported_by_username', models.TextField(null=True)),
                ('creation_time', models.DateTimeField(auto_now=True, null=True)),
                ('reason', models.TextField(null=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_system.post')),
            ],
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('management_token', models.TextField(null=True)),
                ('ip', models.TextField(null=True)),
                ('management_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
